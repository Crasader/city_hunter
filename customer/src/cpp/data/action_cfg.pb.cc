// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action_cfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "action_cfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

namespace {

const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionIDs_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_action_5fcfg_2eproto() {
  protobuf_AddDesc_action_5fcfg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "action_cfg.proto");
  GOOGLE_CHECK(file != NULL);
  Action_descriptor_ = file->message_type(0);
  static const int Action_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, from_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, speed_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  ActorAction_descriptor_ = file->message_type(1);
  static const int ActorAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAction, actor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAction, action_),
  };
  ActorAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorAction_descriptor_,
      ActorAction::default_instance_,
      ActorAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorAction));
  ActionCfg_descriptor_ = file->message_type(2);
  static const int ActionCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCfg, actor_action_),
  };
  ActionCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionCfg_descriptor_,
      ActionCfg::default_instance_,
      ActionCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionCfg));
  ActionIDs_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_action_5fcfg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorAction_descriptor_, &ActorAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionCfg_descriptor_, &ActionCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_action_5fcfg_2eproto() {
  delete Action::default_instance_;
  delete Action_reflection_;
  delete ActorAction::default_instance_;
  delete ActorAction_reflection_;
  delete ActionCfg::default_instance_;
  delete ActionCfg_reflection_;
}

void protobuf_AddDesc_action_5fcfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gamer::cfg::protobuf_AddDesc_actor_5ftype_5fcfg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020action_cfg.proto\022\tgamer.cfg\032\024actor_typ"
    "e_cfg.proto\"l\n\006Action\022 \n\002id\030\001 \002(\0162\024.game"
    "r.cfg.ActionIDs\022\014\n\004name\030\002 \001(\t\022\021\n\tfrom_ti"
    "me\030\003 \002(\002\022\020\n\010duration\030\004 \002(\002\022\r\n\005speed\030\005 \002("
    "\002\"[\n\013ActorAction\022)\n\nactor_type\030\001 \002(\0162\025.g"
    "amer.cfg.ActorTypes\022!\n\006action\030\002 \003(\0132\021.ga"
    "mer.cfg.Action\"9\n\tActionCfg\022,\n\014actor_act"
    "ion\030\001 \003(\0132\026.gamer.cfg.ActorAction*\303\007\n\tAc"
    "tionIDs\022\033\n\027ACTION_HERO_KNIGHT_IDLE\020\000\022\033\n\027"
    "ACTION_HERO_KNIGHT_WALK\020\001\022\"\n\036ACTION_HERO"
    "_KNIGHT_NORMAL_ATK1\020\002\022\"\n\036ACTION_HERO_KNI"
    "GHT_NORMAL_ATK2\020\003\022#\n\037ACTION_HERO_KNIGHT_"
    "SPECIAL_ATK1\020\004\022#\n\037ACTION_HERO_KNIGHT_SPE"
    "CIAL_ATK2\020\005\022\034\n\030ACTION_HERO_KNIGHT_HURT1\020"
    "\006\022\034\n\030ACTION_HERO_KNIGHT_HURT2\020\007\022\035\n\031ACTIO"
    "N_HERO_KNIGHT_DEFEND\020\010\022\033\n\027ACTION_HERO_KN"
    "IGHT_DEAD\020\t\022\033\n\027ACTION_HERO_ARCHER_IDLE\020\n"
    "\022\033\n\027ACTION_HERO_ARCHER_WALK\020\013\022\"\n\036ACTION_"
    "HERO_ARCHER_NORMAL_ATK1\020\014\022\"\n\036ACTION_HERO"
    "_ARCHER_NORMAL_ATK2\020\r\022#\n\037ACTION_HERO_ARC"
    "HER_SPECIAL_ATK1\020\016\022#\n\037ACTION_HERO_ARCHER"
    "_SPECIAL_ATK2\020\017\022\034\n\030ACTION_HERO_ARCHER_HU"
    "RT1\020\020\022\034\n\030ACTION_HERO_ARCHER_HURT2\020\021\022\035\n\031A"
    "CTION_HERO_ARCHER_DEFEND\020\022\022\033\n\027ACTION_HER"
    "O_ARCHER_DEAD\020\023\022\031\n\025ACTION_HERO_MAGE_IDLE"
    "\020\024\022\031\n\025ACTION_HERO_MAGE_WALK\020\025\022 \n\034ACTION_"
    "HERO_MAGE_NORMAL_ATK1\020\026\022 \n\034ACTION_HERO_M"
    "AGE_NORMAL_ATK2\020\027\022!\n\035ACTION_HERO_MAGE_SP"
    "ECIAL_ATK1\020\030\022!\n\035ACTION_HERO_MAGE_SPECIAL"
    "_ATK2\020\031\022\032\n\026ACTION_HERO_MAGE_HURT1\020\032\022\032\n\026A"
    "CTION_HERO_MAGE_HURT2\020\033\022\033\n\027ACTION_HERO_M"
    "AGE_DEFEND\020\034\022\031\n\025ACTION_HERO_MAGE_DEAD\020\035", 1279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "action_cfg.proto", &protobuf_RegisterTypes);
  Action::default_instance_ = new Action();
  ActorAction::default_instance_ = new ActorAction();
  ActionCfg::default_instance_ = new ActionCfg();
  Action::default_instance_->InitAsDefaultInstance();
  ActorAction::default_instance_->InitAsDefaultInstance();
  ActionCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_action_5fcfg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_action_5fcfg_2eproto {
  StaticDescriptorInitializer_action_5fcfg_2eproto() {
    protobuf_AddDesc_action_5fcfg_2eproto();
  }
} static_descriptor_initializer_action_5fcfg_2eproto_;
const ::google::protobuf::EnumDescriptor* ActionIDs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionIDs_descriptor_;
}
bool ActionIDs_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Action::kIdFieldNumber;
const int Action::kNameFieldNumber;
const int Action::kFromTimeFieldNumber;
const int Action::kDurationFieldNumber;
const int Action::kSpeedFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.Action)
}

void Action::InitAsDefaultInstance() {
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.Action)
}

void Action::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_time_ = 0;
  duration_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:gamer.cfg.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5fcfg_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Action*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, speed_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gamer.cfg.ActionIDs id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gamer::cfg::ActionIDs_IsValid(value)) {
            set_id(static_cast< ::gamer::cfg::ActionIDs >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_from_time;
        break;
      }

      // required float from_time = 3;
      case 3: {
        if (tag == 29) {
         parse_from_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &from_time_)));
          set_has_from_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }

      // required float duration = 4;
      case 4: {
        if (tag == 37) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_speed;
        break;
      }

      // required float speed = 5;
      case 5: {
        if (tag == 45) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.Action)
  // required .gamer.cfg.ActionIDs id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required float from_time = 3;
  if (has_from_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->from_time(), output);
  }

  // required float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // required float speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.Action)
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.Action)
  // required .gamer.cfg.ActionIDs id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required float from_time = 3;
  if (has_from_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->from_time(), target);
  }

  // required float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  // required float speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.Action)
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gamer.cfg.ActionIDs id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float from_time = 3;
    if (has_from_time()) {
      total_size += 1 + 4;
    }

    // required float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // required float speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_from_time()) {
      set_from_time(from.from_time());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(from_time_, other->from_time_);
    std::swap(duration_, other->duration_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorAction::kActorTypeFieldNumber;
const int ActorAction::kActionFieldNumber;
#endif  // !_MSC_VER

ActorAction::ActorAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.ActorAction)
}

void ActorAction::InitAsDefaultInstance() {
}

ActorAction::ActorAction(const ActorAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.ActorAction)
}

void ActorAction::SharedCtor() {
  _cached_size_ = 0;
  actor_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorAction::~ActorAction() {
  // @@protoc_insertion_point(destructor:gamer.cfg.ActorAction)
  SharedDtor();
}

void ActorAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorAction_descriptor_;
}

const ActorAction& ActorAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5fcfg_2eproto();
  return *default_instance_;
}

ActorAction* ActorAction::default_instance_ = NULL;

ActorAction* ActorAction::New() const {
  return new ActorAction;
}

void ActorAction::Clear() {
  actor_type_ = 0;
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.ActorAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gamer.cfg.ActorTypes actor_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gamer::cfg::ActorTypes_IsValid(value)) {
            set_actor_type(static_cast< ::gamer::cfg::ActorTypes >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_action;
        break;
      }

      // repeated .gamer.cfg.Action action = 2;
      case 2: {
        if (tag == 18) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_action;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.ActorAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.ActorAction)
  return false;
#undef DO_
}

void ActorAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.ActorAction)
  // required .gamer.cfg.ActorTypes actor_type = 1;
  if (has_actor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->actor_type(), output);
  }

  // repeated .gamer.cfg.Action action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.ActorAction)
}

::google::protobuf::uint8* ActorAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.ActorAction)
  // required .gamer.cfg.ActorTypes actor_type = 1;
  if (has_actor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->actor_type(), target);
  }

  // repeated .gamer.cfg.Action action = 2;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.ActorAction)
  return target;
}

int ActorAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gamer.cfg.ActorTypes actor_type = 1;
    if (has_actor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actor_type());
    }

  }
  // repeated .gamer.cfg.Action action = 2;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorAction::MergeFrom(const ActorAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_type()) {
      set_actor_type(from.actor_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorAction::CopyFrom(const ActorAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->action())) return false;
  return true;
}

void ActorAction::Swap(ActorAction* other) {
  if (other != this) {
    std::swap(actor_type_, other->actor_type_);
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorAction_descriptor_;
  metadata.reflection = ActorAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionCfg::kActorActionFieldNumber;
#endif  // !_MSC_VER

ActionCfg::ActionCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.ActionCfg)
}

void ActionCfg::InitAsDefaultInstance() {
}

ActionCfg::ActionCfg(const ActionCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.ActionCfg)
}

void ActionCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionCfg::~ActionCfg() {
  // @@protoc_insertion_point(destructor:gamer.cfg.ActionCfg)
  SharedDtor();
}

void ActionCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionCfg_descriptor_;
}

const ActionCfg& ActionCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_5fcfg_2eproto();
  return *default_instance_;
}

ActionCfg* ActionCfg::default_instance_ = NULL;

ActionCfg* ActionCfg::New() const {
  return new ActionCfg;
}

void ActionCfg::Clear() {
  actor_action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.ActionCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gamer.cfg.ActorAction actor_action = 1;
      case 1: {
        if (tag == 10) {
         parse_actor_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actor_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_actor_action;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.ActionCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.ActionCfg)
  return false;
#undef DO_
}

void ActionCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.ActionCfg)
  // repeated .gamer.cfg.ActorAction actor_action = 1;
  for (int i = 0; i < this->actor_action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actor_action(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.ActionCfg)
}

::google::protobuf::uint8* ActionCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.ActionCfg)
  // repeated .gamer.cfg.ActorAction actor_action = 1;
  for (int i = 0; i < this->actor_action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actor_action(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.ActionCfg)
  return target;
}

int ActionCfg::ByteSize() const {
  int total_size = 0;

  // repeated .gamer.cfg.ActorAction actor_action = 1;
  total_size += 1 * this->actor_action_size();
  for (int i = 0; i < this->actor_action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actor_action(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionCfg::MergeFrom(const ActionCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_action_.MergeFrom(from.actor_action_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionCfg::CopyFrom(const ActionCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCfg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->actor_action())) return false;
  return true;
}

void ActionCfg::Swap(ActionCfg* other) {
  if (other != this) {
    actor_action_.Swap(&other->actor_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionCfg_descriptor_;
  metadata.reflection = ActionCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
