// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action_cfg.proto

#ifndef PROTOBUF_action_5fcfg_2eproto__INCLUDED
#define PROTOBUF_action_5fcfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "actor_type_cfg.pb.h"
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_action_5fcfg_2eproto();
void protobuf_AssignDesc_action_5fcfg_2eproto();
void protobuf_ShutdownFile_action_5fcfg_2eproto();

class Action;
class ActorAction;
class ActionCfg;

enum ActionIDs {
  ACTION_HERO_KNIGHT_IDLE = 0,
  ACTION_HERO_KNIGHT_WALK = 1,
  ACTION_HERO_KNIGHT_NORMAL_ATK1 = 2,
  ACTION_HERO_KNIGHT_NORMAL_ATK2 = 3,
  ACTION_HERO_KNIGHT_SPECIAL_ATK1 = 4,
  ACTION_HERO_KNIGHT_SPECIAL_ATK2 = 5,
  ACTION_HERO_KNIGHT_HURT1 = 6,
  ACTION_HERO_KNIGHT_HURT2 = 7,
  ACTION_HERO_KNIGHT_DEFEND = 8,
  ACTION_HERO_KNIGHT_DEAD = 9,
  ACTION_HERO_ARCHER_IDLE = 10,
  ACTION_HERO_ARCHER_WALK = 11,
  ACTION_HERO_ARCHER_NORMAL_ATK1 = 12,
  ACTION_HERO_ARCHER_NORMAL_ATK2 = 13,
  ACTION_HERO_ARCHER_SPECIAL_ATK1 = 14,
  ACTION_HERO_ARCHER_SPECIAL_ATK2 = 15,
  ACTION_HERO_ARCHER_HURT1 = 16,
  ACTION_HERO_ARCHER_HURT2 = 17,
  ACTION_HERO_ARCHER_DEFEND = 18,
  ACTION_HERO_ARCHER_DEAD = 19,
  ACTION_HERO_MAGE_IDLE = 20,
  ACTION_HERO_MAGE_WALK = 21,
  ACTION_HERO_MAGE_NORMAL_ATK1 = 22,
  ACTION_HERO_MAGE_NORMAL_ATK2 = 23,
  ACTION_HERO_MAGE_SPECIAL_ATK1 = 24,
  ACTION_HERO_MAGE_SPECIAL_ATK2 = 25,
  ACTION_HERO_MAGE_HURT1 = 26,
  ACTION_HERO_MAGE_HURT2 = 27,
  ACTION_HERO_MAGE_DEFEND = 28,
  ACTION_HERO_MAGE_DEAD = 29
};
bool ActionIDs_IsValid(int value);
const ActionIDs ActionIDs_MIN = ACTION_HERO_KNIGHT_IDLE;
const ActionIDs ActionIDs_MAX = ACTION_HERO_MAGE_DEAD;
const int ActionIDs_ARRAYSIZE = ActionIDs_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionIDs_descriptor();
inline const ::std::string& ActionIDs_Name(ActionIDs value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionIDs_descriptor(), value);
}
inline bool ActionIDs_Parse(
    const ::std::string& name, ActionIDs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionIDs>(
    ActionIDs_descriptor(), name, value);
}
// ===================================================================

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gamer.cfg.ActionIDs id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::gamer::cfg::ActionIDs id() const;
  inline void set_id(::gamer::cfg::ActionIDs value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float from_time = 3;
  inline bool has_from_time() const;
  inline void clear_from_time();
  static const int kFromTimeFieldNumber = 3;
  inline float from_time() const;
  inline void set_from_time(float value);

  // required float duration = 4;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 4;
  inline float duration() const;
  inline void set_duration(float value);

  // required float speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline float speed() const;
  inline void set_speed(float value);

  // @@protoc_insertion_point(class_scope:gamer.cfg.Action)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_from_time();
  inline void clear_has_from_time();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int id_;
  float from_time_;
  float duration_;
  float speed_;
  friend void  protobuf_AddDesc_action_5fcfg_2eproto();
  friend void protobuf_AssignDesc_action_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_action_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class ActorAction : public ::google::protobuf::Message {
 public:
  ActorAction();
  virtual ~ActorAction();

  ActorAction(const ActorAction& from);

  inline ActorAction& operator=(const ActorAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorAction& default_instance();

  void Swap(ActorAction* other);

  // implements Message ----------------------------------------------

  ActorAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorAction& from);
  void MergeFrom(const ActorAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gamer.cfg.ActorTypes actor_type = 1;
  inline bool has_actor_type() const;
  inline void clear_actor_type();
  static const int kActorTypeFieldNumber = 1;
  inline ::gamer::cfg::ActorTypes actor_type() const;
  inline void set_actor_type(::gamer::cfg::ActorTypes value);

  // repeated .gamer.cfg.Action action = 2;
  inline int action_size() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline const ::gamer::cfg::Action& action(int index) const;
  inline ::gamer::cfg::Action* mutable_action(int index);
  inline ::gamer::cfg::Action* add_action();
  inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Action >&
      action() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Action >*
      mutable_action();

  // @@protoc_insertion_point(class_scope:gamer.cfg.ActorAction)
 private:
  inline void set_has_actor_type();
  inline void clear_has_actor_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Action > action_;
  int actor_type_;
  friend void  protobuf_AddDesc_action_5fcfg_2eproto();
  friend void protobuf_AssignDesc_action_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_action_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static ActorAction* default_instance_;
};
// -------------------------------------------------------------------

class ActionCfg : public ::google::protobuf::Message {
 public:
  ActionCfg();
  virtual ~ActionCfg();

  ActionCfg(const ActionCfg& from);

  inline ActionCfg& operator=(const ActionCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionCfg& default_instance();

  void Swap(ActionCfg* other);

  // implements Message ----------------------------------------------

  ActionCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionCfg& from);
  void MergeFrom(const ActionCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gamer.cfg.ActorAction actor_action = 1;
  inline int actor_action_size() const;
  inline void clear_actor_action();
  static const int kActorActionFieldNumber = 1;
  inline const ::gamer::cfg::ActorAction& actor_action(int index) const;
  inline ::gamer::cfg::ActorAction* mutable_actor_action(int index);
  inline ::gamer::cfg::ActorAction* add_actor_action();
  inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::ActorAction >&
      actor_action() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::ActorAction >*
      mutable_actor_action();

  // @@protoc_insertion_point(class_scope:gamer.cfg.ActionCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gamer::cfg::ActorAction > actor_action_;
  friend void  protobuf_AddDesc_action_5fcfg_2eproto();
  friend void protobuf_AssignDesc_action_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_action_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static ActionCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// Action

// required .gamer.cfg.ActionIDs id = 1;
inline bool Action::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::gamer::cfg::ActionIDs Action::id() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Action.id)
  return static_cast< ::gamer::cfg::ActionIDs >(id_);
}
inline void Action::set_id(::gamer::cfg::ActionIDs value) {
  assert(::gamer::cfg::ActionIDs_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Action.id)
}

// optional string name = 2;
inline bool Action::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Action::name() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Action.name)
  return *name_;
}
inline void Action::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gamer.cfg.Action.name)
}
inline void Action::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamer.cfg.Action.name)
}
inline void Action::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamer.cfg.Action.name)
}
inline ::std::string* Action::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamer.cfg.Action.name)
  return name_;
}
inline ::std::string* Action::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Action::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.Action.name)
}

// required float from_time = 3;
inline bool Action::has_from_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_from_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_from_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_from_time() {
  from_time_ = 0;
  clear_has_from_time();
}
inline float Action::from_time() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Action.from_time)
  return from_time_;
}
inline void Action::set_from_time(float value) {
  set_has_from_time();
  from_time_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Action.from_time)
}

// required float duration = 4;
inline bool Action::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float Action::duration() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Action.duration)
  return duration_;
}
inline void Action::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Action.duration)
}

// required float speed = 5;
inline bool Action::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float Action::speed() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Action.speed)
  return speed_;
}
inline void Action::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Action.speed)
}

// -------------------------------------------------------------------

// ActorAction

// required .gamer.cfg.ActorTypes actor_type = 1;
inline bool ActorAction::has_actor_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActorAction::set_has_actor_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActorAction::clear_has_actor_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActorAction::clear_actor_type() {
  actor_type_ = 0;
  clear_has_actor_type();
}
inline ::gamer::cfg::ActorTypes ActorAction::actor_type() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.ActorAction.actor_type)
  return static_cast< ::gamer::cfg::ActorTypes >(actor_type_);
}
inline void ActorAction::set_actor_type(::gamer::cfg::ActorTypes value) {
  assert(::gamer::cfg::ActorTypes_IsValid(value));
  set_has_actor_type();
  actor_type_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.ActorAction.actor_type)
}

// repeated .gamer.cfg.Action action = 2;
inline int ActorAction::action_size() const {
  return action_.size();
}
inline void ActorAction::clear_action() {
  action_.Clear();
}
inline const ::gamer::cfg::Action& ActorAction::action(int index) const {
  // @@protoc_insertion_point(field_get:gamer.cfg.ActorAction.action)
  return action_.Get(index);
}
inline ::gamer::cfg::Action* ActorAction::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:gamer.cfg.ActorAction.action)
  return action_.Mutable(index);
}
inline ::gamer::cfg::Action* ActorAction::add_action() {
  // @@protoc_insertion_point(field_add:gamer.cfg.ActorAction.action)
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Action >&
ActorAction::action() const {
  // @@protoc_insertion_point(field_list:gamer.cfg.ActorAction.action)
  return action_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Action >*
ActorAction::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:gamer.cfg.ActorAction.action)
  return &action_;
}

// -------------------------------------------------------------------

// ActionCfg

// repeated .gamer.cfg.ActorAction actor_action = 1;
inline int ActionCfg::actor_action_size() const {
  return actor_action_.size();
}
inline void ActionCfg::clear_actor_action() {
  actor_action_.Clear();
}
inline const ::gamer::cfg::ActorAction& ActionCfg::actor_action(int index) const {
  // @@protoc_insertion_point(field_get:gamer.cfg.ActionCfg.actor_action)
  return actor_action_.Get(index);
}
inline ::gamer::cfg::ActorAction* ActionCfg::mutable_actor_action(int index) {
  // @@protoc_insertion_point(field_mutable:gamer.cfg.ActionCfg.actor_action)
  return actor_action_.Mutable(index);
}
inline ::gamer::cfg::ActorAction* ActionCfg::add_actor_action() {
  // @@protoc_insertion_point(field_add:gamer.cfg.ActionCfg.actor_action)
  return actor_action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::ActorAction >&
ActionCfg::actor_action() const {
  // @@protoc_insertion_point(field_list:gamer.cfg.ActionCfg.actor_action)
  return actor_action_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::ActorAction >*
ActionCfg::mutable_actor_action() {
  // @@protoc_insertion_point(field_mutable_list:gamer.cfg.ActionCfg.actor_action)
  return &actor_action_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gamer::cfg::ActionIDs> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gamer::cfg::ActionIDs>() {
  return ::gamer::cfg::ActionIDs_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_action_5fcfg_2eproto__INCLUDED
