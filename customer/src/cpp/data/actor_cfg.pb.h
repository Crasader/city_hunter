// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actor_cfg.proto

#ifndef PROTOBUF_actor_5fcfg_2eproto__INCLUDED
#define PROTOBUF_actor_5fcfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "actor_type_cfg.pb.h"
#include "common_cfg.pb.h"
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_actor_5fcfg_2eproto();
void protobuf_AssignDesc_actor_5fcfg_2eproto();
void protobuf_ShutdownFile_actor_5fcfg_2eproto();

class Actor;
class ActorCfg;

// ===================================================================

class Actor : public ::google::protobuf::Message {
 public:
  Actor();
  virtual ~Actor();

  Actor(const Actor& from);

  inline Actor& operator=(const Actor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Actor& default_instance();

  void Swap(Actor* other);

  // implements Message ----------------------------------------------

  Actor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Actor& from);
  void MergeFrom(const Actor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .gamer.cfg.ActorTypes actor_type = 2;
  inline bool has_actor_type() const;
  inline void clear_actor_type();
  static const int kActorTypeFieldNumber = 2;
  inline ::gamer::cfg::ActorTypes actor_type() const;
  inline void set_actor_type(::gamer::cfg::ActorTypes value);

  // required int32 model_id = 3;
  inline bool has_model_id() const;
  inline void clear_model_id();
  static const int kModelIdFieldNumber = 3;
  inline ::google::protobuf::int32 model_id() const;
  inline void set_model_id(::google::protobuf::int32 value);

  // required .gamer.cfg.Vec3 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::gamer::cfg::Vec3& position() const;
  inline ::gamer::cfg::Vec3* mutable_position();
  inline ::gamer::cfg::Vec3* release_position();
  inline void set_allocated_position(::gamer::cfg::Vec3* position);

  // required .gamer.cfg.Vec3 rotation = 5;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 5;
  inline const ::gamer::cfg::Vec3& rotation() const;
  inline ::gamer::cfg::Vec3* mutable_rotation();
  inline ::gamer::cfg::Vec3* release_rotation();
  inline void set_allocated_rotation(::gamer::cfg::Vec3* rotation);

  // optional float scale = 6 [default = 1];
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 6;
  inline float scale() const;
  inline void set_scale(float value);

  // required float ai_update_interval = 7;
  inline bool has_ai_update_interval() const;
  inline void clear_ai_update_interval();
  static const int kAiUpdateIntervalFieldNumber = 7;
  inline float ai_update_interval() const;
  inline void set_ai_update_interval(float value);

  // required int32 first_state_id = 8;
  inline bool has_first_state_id() const;
  inline void clear_first_state_id();
  static const int kFirstStateIdFieldNumber = 8;
  inline ::google::protobuf::int32 first_state_id() const;
  inline void set_first_state_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gamer.cfg.Actor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_actor_type();
  inline void clear_has_actor_type();
  inline void set_has_model_id();
  inline void clear_has_model_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_ai_update_interval();
  inline void clear_has_ai_update_interval();
  inline void set_has_first_state_id();
  inline void clear_has_first_state_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  int actor_type_;
  ::gamer::cfg::Vec3* position_;
  ::google::protobuf::int32 model_id_;
  float scale_;
  ::gamer::cfg::Vec3* rotation_;
  float ai_update_interval_;
  ::google::protobuf::int32 first_state_id_;
  friend void  protobuf_AddDesc_actor_5fcfg_2eproto();
  friend void protobuf_AssignDesc_actor_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_actor_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static Actor* default_instance_;
};
// -------------------------------------------------------------------

class ActorCfg : public ::google::protobuf::Message {
 public:
  ActorCfg();
  virtual ~ActorCfg();

  ActorCfg(const ActorCfg& from);

  inline ActorCfg& operator=(const ActorCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActorCfg& default_instance();

  void Swap(ActorCfg* other);

  // implements Message ----------------------------------------------

  ActorCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActorCfg& from);
  void MergeFrom(const ActorCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gamer.cfg.Actor actor = 1;
  inline int actor_size() const;
  inline void clear_actor();
  static const int kActorFieldNumber = 1;
  inline const ::gamer::cfg::Actor& actor(int index) const;
  inline ::gamer::cfg::Actor* mutable_actor(int index);
  inline ::gamer::cfg::Actor* add_actor();
  inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Actor >&
      actor() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Actor >*
      mutable_actor();

  // @@protoc_insertion_point(class_scope:gamer.cfg.ActorCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Actor > actor_;
  friend void  protobuf_AddDesc_actor_5fcfg_2eproto();
  friend void protobuf_AssignDesc_actor_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_actor_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static ActorCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// Actor

// required int32 id = 1;
inline bool Actor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Actor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Actor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Actor::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Actor::id() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.id)
  return id_;
}
inline void Actor::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Actor.id)
}

// required .gamer.cfg.ActorTypes actor_type = 2;
inline bool Actor::has_actor_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Actor::set_has_actor_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Actor::clear_has_actor_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Actor::clear_actor_type() {
  actor_type_ = 0;
  clear_has_actor_type();
}
inline ::gamer::cfg::ActorTypes Actor::actor_type() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.actor_type)
  return static_cast< ::gamer::cfg::ActorTypes >(actor_type_);
}
inline void Actor::set_actor_type(::gamer::cfg::ActorTypes value) {
  assert(::gamer::cfg::ActorTypes_IsValid(value));
  set_has_actor_type();
  actor_type_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Actor.actor_type)
}

// required int32 model_id = 3;
inline bool Actor::has_model_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Actor::set_has_model_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Actor::clear_has_model_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Actor::clear_model_id() {
  model_id_ = 0;
  clear_has_model_id();
}
inline ::google::protobuf::int32 Actor::model_id() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.model_id)
  return model_id_;
}
inline void Actor::set_model_id(::google::protobuf::int32 value) {
  set_has_model_id();
  model_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Actor.model_id)
}

// required .gamer.cfg.Vec3 position = 4;
inline bool Actor::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Actor::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Actor::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Actor::clear_position() {
  if (position_ != NULL) position_->::gamer::cfg::Vec3::Clear();
  clear_has_position();
}
inline const ::gamer::cfg::Vec3& Actor::position() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::gamer::cfg::Vec3* Actor::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::gamer::cfg::Vec3;
  // @@protoc_insertion_point(field_mutable:gamer.cfg.Actor.position)
  return position_;
}
inline ::gamer::cfg::Vec3* Actor::release_position() {
  clear_has_position();
  ::gamer::cfg::Vec3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Actor::set_allocated_position(::gamer::cfg::Vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.Actor.position)
}

// required .gamer.cfg.Vec3 rotation = 5;
inline bool Actor::has_rotation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Actor::set_has_rotation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Actor::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Actor::clear_rotation() {
  if (rotation_ != NULL) rotation_->::gamer::cfg::Vec3::Clear();
  clear_has_rotation();
}
inline const ::gamer::cfg::Vec3& Actor::rotation() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.rotation)
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::gamer::cfg::Vec3* Actor::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::gamer::cfg::Vec3;
  // @@protoc_insertion_point(field_mutable:gamer.cfg.Actor.rotation)
  return rotation_;
}
inline ::gamer::cfg::Vec3* Actor::release_rotation() {
  clear_has_rotation();
  ::gamer::cfg::Vec3* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Actor::set_allocated_rotation(::gamer::cfg::Vec3* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.Actor.rotation)
}

// optional float scale = 6 [default = 1];
inline bool Actor::has_scale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Actor::set_has_scale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Actor::clear_has_scale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Actor::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float Actor::scale() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.scale)
  return scale_;
}
inline void Actor::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Actor.scale)
}

// required float ai_update_interval = 7;
inline bool Actor::has_ai_update_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Actor::set_has_ai_update_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Actor::clear_has_ai_update_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Actor::clear_ai_update_interval() {
  ai_update_interval_ = 0;
  clear_has_ai_update_interval();
}
inline float Actor::ai_update_interval() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.ai_update_interval)
  return ai_update_interval_;
}
inline void Actor::set_ai_update_interval(float value) {
  set_has_ai_update_interval();
  ai_update_interval_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Actor.ai_update_interval)
}

// required int32 first_state_id = 8;
inline bool Actor::has_first_state_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Actor::set_has_first_state_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Actor::clear_has_first_state_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Actor::clear_first_state_id() {
  first_state_id_ = 0;
  clear_has_first_state_id();
}
inline ::google::protobuf::int32 Actor::first_state_id() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Actor.first_state_id)
  return first_state_id_;
}
inline void Actor::set_first_state_id(::google::protobuf::int32 value) {
  set_has_first_state_id();
  first_state_id_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Actor.first_state_id)
}

// -------------------------------------------------------------------

// ActorCfg

// repeated .gamer.cfg.Actor actor = 1;
inline int ActorCfg::actor_size() const {
  return actor_.size();
}
inline void ActorCfg::clear_actor() {
  actor_.Clear();
}
inline const ::gamer::cfg::Actor& ActorCfg::actor(int index) const {
  // @@protoc_insertion_point(field_get:gamer.cfg.ActorCfg.actor)
  return actor_.Get(index);
}
inline ::gamer::cfg::Actor* ActorCfg::mutable_actor(int index) {
  // @@protoc_insertion_point(field_mutable:gamer.cfg.ActorCfg.actor)
  return actor_.Mutable(index);
}
inline ::gamer::cfg::Actor* ActorCfg::add_actor() {
  // @@protoc_insertion_point(field_add:gamer.cfg.ActorCfg.actor)
  return actor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Actor >&
ActorCfg::actor() const {
  // @@protoc_insertion_point(field_list:gamer.cfg.ActorCfg.actor)
  return actor_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Actor >*
ActorCfg::mutable_actor() {
  // @@protoc_insertion_point(field_mutable_list:gamer.cfg.ActorCfg.actor)
  return &actor_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_actor_5fcfg_2eproto__INCLUDED
