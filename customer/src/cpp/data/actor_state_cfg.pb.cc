// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actor_state_cfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "actor_state_cfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

namespace {

const ::google::protobuf::Descriptor* NextStateCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NextStateCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorStateCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorStateCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StateChangeRequirements_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_actor_5fstate_5fcfg_2eproto() {
  protobuf_AddDesc_actor_5fstate_5fcfg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "actor_state_cfg.proto");
  GOOGLE_CHECK(file != NULL);
  NextStateCfg_descriptor_ = file->message_type(0);
  static const int NextStateCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStateCfg, state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStateCfg, state_change_requirement_),
  };
  NextStateCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NextStateCfg_descriptor_,
      NextStateCfg::default_instance_,
      NextStateCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStateCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NextStateCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NextStateCfg));
  StateCfg_descriptor_ = file->message_type(1);
  static const int StateCfg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, actor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, state_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, next_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, enter_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, update_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, enter_audio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, update_audio_),
  };
  StateCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateCfg_descriptor_,
      StateCfg::default_instance_,
      StateCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateCfg));
  ActorStateCfg_descriptor_ = file->message_type(2);
  static const int ActorStateCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStateCfg, state_cfg_),
  };
  ActorStateCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorStateCfg_descriptor_,
      ActorStateCfg::default_instance_,
      ActorStateCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStateCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStateCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorStateCfg));
  StateChangeRequirements_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_actor_5fstate_5fcfg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NextStateCfg_descriptor_, &NextStateCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateCfg_descriptor_, &StateCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorStateCfg_descriptor_, &ActorStateCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_actor_5fstate_5fcfg_2eproto() {
  delete NextStateCfg::default_instance_;
  delete NextStateCfg_reflection_;
  delete StateCfg::default_instance_;
  delete StateCfg_reflection_;
  delete ActorStateCfg::default_instance_;
  delete ActorStateCfg_reflection_;
}

void protobuf_AddDesc_actor_5fstate_5fcfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025actor_state_cfg.proto\022\tgamer.cfg\"B\n\014Ne"
    "xtStateCfg\022\020\n\010state_id\030\001 \002(\005\022 \n\030state_ch"
    "ange_requirement\030\002 \002(\005\"\276\001\n\010StateCfg\022\022\n\na"
    "ctor_type\030\001 \002(\005\022\020\n\010state_id\030\002 \002(\005\022+\n\nnex"
    "t_state\030\003 \003(\0132\027.gamer.cfg.NextStateCfg\022\024"
    "\n\014enter_action\030\004 \002(\005\022\030\n\rupdate_action\030\005 "
    "\001(\005:\0011\022\026\n\013enter_audio\030\006 \001(\005:\0011\022\027\n\014update"
    "_audio\030\007 \001(\005:\0011\"7\n\rActorStateCfg\022&\n\tstat"
    "e_cfg\030\001 \003(\0132\023.gamer.cfg.StateCfg*a\n\027Stat"
    "eChangeRequirements\022\022\n\016NO_REQUIREMENT\020\000\022"
    "\013\n\007HP_LOW1\020\001\022\013\n\007HP_LOW2\020\002\022\013\n\007RANDOM1\020\003\022\013"
    "\n\007RANDOM2\020\004", 451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "actor_state_cfg.proto", &protobuf_RegisterTypes);
  NextStateCfg::default_instance_ = new NextStateCfg();
  StateCfg::default_instance_ = new StateCfg();
  ActorStateCfg::default_instance_ = new ActorStateCfg();
  NextStateCfg::default_instance_->InitAsDefaultInstance();
  StateCfg::default_instance_->InitAsDefaultInstance();
  ActorStateCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_actor_5fstate_5fcfg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_actor_5fstate_5fcfg_2eproto {
  StaticDescriptorInitializer_actor_5fstate_5fcfg_2eproto() {
    protobuf_AddDesc_actor_5fstate_5fcfg_2eproto();
  }
} static_descriptor_initializer_actor_5fstate_5fcfg_2eproto_;
const ::google::protobuf::EnumDescriptor* StateChangeRequirements_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateChangeRequirements_descriptor_;
}
bool StateChangeRequirements_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NextStateCfg::kStateIdFieldNumber;
const int NextStateCfg::kStateChangeRequirementFieldNumber;
#endif  // !_MSC_VER

NextStateCfg::NextStateCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.NextStateCfg)
}

void NextStateCfg::InitAsDefaultInstance() {
}

NextStateCfg::NextStateCfg(const NextStateCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.NextStateCfg)
}

void NextStateCfg::SharedCtor() {
  _cached_size_ = 0;
  state_id_ = 0;
  state_change_requirement_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextStateCfg::~NextStateCfg() {
  // @@protoc_insertion_point(destructor:gamer.cfg.NextStateCfg)
  SharedDtor();
}

void NextStateCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NextStateCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NextStateCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NextStateCfg_descriptor_;
}

const NextStateCfg& NextStateCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actor_5fstate_5fcfg_2eproto();
  return *default_instance_;
}

NextStateCfg* NextStateCfg::default_instance_ = NULL;

NextStateCfg* NextStateCfg::New() const {
  return new NextStateCfg;
}

void NextStateCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NextStateCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(state_id_, state_change_requirement_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NextStateCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.NextStateCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_id_)));
          set_has_state_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_change_requirement;
        break;
      }

      // required int32 state_change_requirement = 2;
      case 2: {
        if (tag == 16) {
         parse_state_change_requirement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_change_requirement_)));
          set_has_state_change_requirement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.NextStateCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.NextStateCfg)
  return false;
#undef DO_
}

void NextStateCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.NextStateCfg)
  // required int32 state_id = 1;
  if (has_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state_id(), output);
  }

  // required int32 state_change_requirement = 2;
  if (has_state_change_requirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state_change_requirement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.NextStateCfg)
}

::google::protobuf::uint8* NextStateCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.NextStateCfg)
  // required int32 state_id = 1;
  if (has_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state_id(), target);
  }

  // required int32 state_change_requirement = 2;
  if (has_state_change_requirement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state_change_requirement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.NextStateCfg)
  return target;
}

int NextStateCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state_id = 1;
    if (has_state_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_id());
    }

    // required int32 state_change_requirement = 2;
    if (has_state_change_requirement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_change_requirement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextStateCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NextStateCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NextStateCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NextStateCfg::MergeFrom(const NextStateCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state_id()) {
      set_state_id(from.state_id());
    }
    if (from.has_state_change_requirement()) {
      set_state_change_requirement(from.state_change_requirement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NextStateCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NextStateCfg::CopyFrom(const NextStateCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextStateCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NextStateCfg::Swap(NextStateCfg* other) {
  if (other != this) {
    std::swap(state_id_, other->state_id_);
    std::swap(state_change_requirement_, other->state_change_requirement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NextStateCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NextStateCfg_descriptor_;
  metadata.reflection = NextStateCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateCfg::kActorTypeFieldNumber;
const int StateCfg::kStateIdFieldNumber;
const int StateCfg::kNextStateFieldNumber;
const int StateCfg::kEnterActionFieldNumber;
const int StateCfg::kUpdateActionFieldNumber;
const int StateCfg::kEnterAudioFieldNumber;
const int StateCfg::kUpdateAudioFieldNumber;
#endif  // !_MSC_VER

StateCfg::StateCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.StateCfg)
}

void StateCfg::InitAsDefaultInstance() {
}

StateCfg::StateCfg(const StateCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.StateCfg)
}

void StateCfg::SharedCtor() {
  _cached_size_ = 0;
  actor_type_ = 0;
  state_id_ = 0;
  enter_action_ = 0;
  update_action_ = 1;
  enter_audio_ = 1;
  update_audio_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateCfg::~StateCfg() {
  // @@protoc_insertion_point(destructor:gamer.cfg.StateCfg)
  SharedDtor();
}

void StateCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateCfg_descriptor_;
}

const StateCfg& StateCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actor_5fstate_5fcfg_2eproto();
  return *default_instance_;
}

StateCfg* StateCfg::default_instance_ = NULL;

StateCfg* StateCfg::New() const {
  return new StateCfg;
}

void StateCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StateCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(actor_type_, state_id_);
    enter_action_ = 0;
    update_action_ = 1;
    enter_audio_ = 1;
    update_audio_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  next_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.StateCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 actor_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_type_)));
          set_has_actor_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_id;
        break;
      }

      // required int32 state_id = 2;
      case 2: {
        if (tag == 16) {
         parse_state_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_id_)));
          set_has_state_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_state;
        break;
      }

      // repeated .gamer.cfg.NextStateCfg next_state = 3;
      case 3: {
        if (tag == 26) {
         parse_next_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_next_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_state;
        if (input->ExpectTag(32)) goto parse_enter_action;
        break;
      }

      // required int32 enter_action = 4;
      case 4: {
        if (tag == 32) {
         parse_enter_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_action_)));
          set_has_enter_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_update_action;
        break;
      }

      // optional int32 update_action = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_update_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_action_)));
          set_has_update_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enter_audio;
        break;
      }

      // optional int32 enter_audio = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_enter_audio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_audio_)));
          set_has_enter_audio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_update_audio;
        break;
      }

      // optional int32 update_audio = 7 [default = 1];
      case 7: {
        if (tag == 56) {
         parse_update_audio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_audio_)));
          set_has_update_audio();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.StateCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.StateCfg)
  return false;
#undef DO_
}

void StateCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.StateCfg)
  // required int32 actor_type = 1;
  if (has_actor_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actor_type(), output);
  }

  // required int32 state_id = 2;
  if (has_state_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state_id(), output);
  }

  // repeated .gamer.cfg.NextStateCfg next_state = 3;
  for (int i = 0; i < this->next_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->next_state(i), output);
  }

  // required int32 enter_action = 4;
  if (has_enter_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enter_action(), output);
  }

  // optional int32 update_action = 5 [default = 1];
  if (has_update_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->update_action(), output);
  }

  // optional int32 enter_audio = 6 [default = 1];
  if (has_enter_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enter_audio(), output);
  }

  // optional int32 update_audio = 7 [default = 1];
  if (has_update_audio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->update_audio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.StateCfg)
}

::google::protobuf::uint8* StateCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.StateCfg)
  // required int32 actor_type = 1;
  if (has_actor_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actor_type(), target);
  }

  // required int32 state_id = 2;
  if (has_state_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state_id(), target);
  }

  // repeated .gamer.cfg.NextStateCfg next_state = 3;
  for (int i = 0; i < this->next_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->next_state(i), target);
  }

  // required int32 enter_action = 4;
  if (has_enter_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enter_action(), target);
  }

  // optional int32 update_action = 5 [default = 1];
  if (has_update_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->update_action(), target);
  }

  // optional int32 enter_audio = 6 [default = 1];
  if (has_enter_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enter_audio(), target);
  }

  // optional int32 update_audio = 7 [default = 1];
  if (has_update_audio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->update_audio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.StateCfg)
  return target;
}

int StateCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 actor_type = 1;
    if (has_actor_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_type());
    }

    // required int32 state_id = 2;
    if (has_state_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_id());
    }

    // required int32 enter_action = 4;
    if (has_enter_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_action());
    }

    // optional int32 update_action = 5 [default = 1];
    if (has_update_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_action());
    }

    // optional int32 enter_audio = 6 [default = 1];
    if (has_enter_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_audio());
    }

    // optional int32 update_audio = 7 [default = 1];
    if (has_update_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_audio());
    }

  }
  // repeated .gamer.cfg.NextStateCfg next_state = 3;
  total_size += 1 * this->next_state_size();
  for (int i = 0; i < this->next_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->next_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateCfg::MergeFrom(const StateCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  next_state_.MergeFrom(from.next_state_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_type()) {
      set_actor_type(from.actor_type());
    }
    if (from.has_state_id()) {
      set_state_id(from.state_id());
    }
    if (from.has_enter_action()) {
      set_enter_action(from.enter_action());
    }
    if (from.has_update_action()) {
      set_update_action(from.update_action());
    }
    if (from.has_enter_audio()) {
      set_enter_audio(from.enter_audio());
    }
    if (from.has_update_audio()) {
      set_update_audio(from.update_audio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateCfg::CopyFrom(const StateCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->next_state())) return false;
  return true;
}

void StateCfg::Swap(StateCfg* other) {
  if (other != this) {
    std::swap(actor_type_, other->actor_type_);
    std::swap(state_id_, other->state_id_);
    next_state_.Swap(&other->next_state_);
    std::swap(enter_action_, other->enter_action_);
    std::swap(update_action_, other->update_action_);
    std::swap(enter_audio_, other->enter_audio_);
    std::swap(update_audio_, other->update_audio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateCfg_descriptor_;
  metadata.reflection = StateCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorStateCfg::kStateCfgFieldNumber;
#endif  // !_MSC_VER

ActorStateCfg::ActorStateCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.ActorStateCfg)
}

void ActorStateCfg::InitAsDefaultInstance() {
}

ActorStateCfg::ActorStateCfg(const ActorStateCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.ActorStateCfg)
}

void ActorStateCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorStateCfg::~ActorStateCfg() {
  // @@protoc_insertion_point(destructor:gamer.cfg.ActorStateCfg)
  SharedDtor();
}

void ActorStateCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorStateCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorStateCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorStateCfg_descriptor_;
}

const ActorStateCfg& ActorStateCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actor_5fstate_5fcfg_2eproto();
  return *default_instance_;
}

ActorStateCfg* ActorStateCfg::default_instance_ = NULL;

ActorStateCfg* ActorStateCfg::New() const {
  return new ActorStateCfg;
}

void ActorStateCfg::Clear() {
  state_cfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActorStateCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.ActorStateCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gamer.cfg.StateCfg state_cfg = 1;
      case 1: {
        if (tag == 10) {
         parse_state_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state_cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_state_cfg;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.ActorStateCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.ActorStateCfg)
  return false;
#undef DO_
}

void ActorStateCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.ActorStateCfg)
  // repeated .gamer.cfg.StateCfg state_cfg = 1;
  for (int i = 0; i < this->state_cfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state_cfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.ActorStateCfg)
}

::google::protobuf::uint8* ActorStateCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.ActorStateCfg)
  // repeated .gamer.cfg.StateCfg state_cfg = 1;
  for (int i = 0; i < this->state_cfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state_cfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.ActorStateCfg)
  return target;
}

int ActorStateCfg::ByteSize() const {
  int total_size = 0;

  // repeated .gamer.cfg.StateCfg state_cfg = 1;
  total_size += 1 * this->state_cfg_size();
  for (int i = 0; i < this->state_cfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state_cfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorStateCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorStateCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorStateCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActorStateCfg::MergeFrom(const ActorStateCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_cfg_.MergeFrom(from.state_cfg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActorStateCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActorStateCfg::CopyFrom(const ActorStateCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActorStateCfg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->state_cfg())) return false;
  return true;
}

void ActorStateCfg::Swap(ActorStateCfg* other) {
  if (other != this) {
    state_cfg_.Swap(&other->state_cfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActorStateCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorStateCfg_descriptor_;
  metadata.reflection = ActorStateCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
