// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audio_cfg.proto

#ifndef PROTOBUF_audio_5fcfg_2eproto__INCLUDED
#define PROTOBUF_audio_5fcfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_audio_5fcfg_2eproto();
void protobuf_AssignDesc_audio_5fcfg_2eproto();
void protobuf_ShutdownFile_audio_5fcfg_2eproto();

class Audio;
class AudioCfg;

enum AudioIDs {
  AUDIO_HERO_KNIGHT_NORMAL_ATK1 = 0,
  AUDIO_HERO_KNIGHT_NORMAL_ATK2 = 1,
  AUDIO_HERO_KNIGHT_SPECIAL_ATK1 = 2,
  AUDIO_HERO_KNIGHT_SPECIAL_ATK2 = 3,
  AUDIO_HERO_KNIGHT_HURT1 = 4,
  AUDIO_HERO_KNIGHT_HURT2 = 5,
  AUDIO_HERO_KNIGHT_DEFEND = 6,
  AUDIO_HERO_KNIGHT_DEAD = 7,
  AUDIO_HERO_ARCHER_NORMAL_ATK1 = 8,
  AUDIO_HERO_ARCHER_NORMAL_ATK2 = 9,
  AUDIO_HERO_ARCHER_SPECIAL_ATK1 = 10,
  AUDIO_HERO_ARCHER_SPECIAL_ATK2 = 11,
  AUDIO_HERO_ARCHER_HURT1 = 12,
  AUDIO_HERO_ARCHER_HURT2 = 13,
  AUDIO_HERO_ARCHER_DEFEND = 14,
  AUDIO_HERO_ARCHER_DEAD = 15,
  AUDIO_HERO_MAGE_NORMAL_ATK1 = 16,
  AUDIO_HERO_MAGE_NORMAL_ATK2 = 17,
  AUDIO_HERO_MAGE_SPECIAL_ATK1 = 18,
  AUDIO_HERO_MAGE_SPECIAL_ATK2 = 19,
  AUDIO_HERO_MAGE_HURT1 = 20,
  AUDIO_HERO_MAGE_HURT2 = 21,
  AUDIO_HERO_MAGE_DEFEND = 22,
  AUDIO_HERO_MAGE_DEAD = 23
};
bool AudioIDs_IsValid(int value);
const AudioIDs AudioIDs_MIN = AUDIO_HERO_KNIGHT_NORMAL_ATK1;
const AudioIDs AudioIDs_MAX = AUDIO_HERO_MAGE_DEAD;
const int AudioIDs_ARRAYSIZE = AudioIDs_MAX + 1;

const ::google::protobuf::EnumDescriptor* AudioIDs_descriptor();
inline const ::std::string& AudioIDs_Name(AudioIDs value) {
  return ::google::protobuf::internal::NameOfEnum(
    AudioIDs_descriptor(), value);
}
inline bool AudioIDs_Parse(
    const ::std::string& name, AudioIDs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AudioIDs>(
    AudioIDs_descriptor(), name, value);
}
// ===================================================================

class Audio : public ::google::protobuf::Message {
 public:
  Audio();
  virtual ~Audio();

  Audio(const Audio& from);

  inline Audio& operator=(const Audio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Audio& default_instance();

  void Swap(Audio* other);

  // implements Message ----------------------------------------------

  Audio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Audio& from);
  void MergeFrom(const Audio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gamer.cfg.AudioIDs id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::gamer::cfg::AudioIDs id() const;
  inline void set_id(::gamer::cfg::AudioIDs value);

  // required string file = 2;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 2;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:gamer.cfg.Audio)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_file();
  inline void clear_has_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_;
  int id_;
  friend void  protobuf_AddDesc_audio_5fcfg_2eproto();
  friend void protobuf_AssignDesc_audio_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_audio_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static Audio* default_instance_;
};
// -------------------------------------------------------------------

class AudioCfg : public ::google::protobuf::Message {
 public:
  AudioCfg();
  virtual ~AudioCfg();

  AudioCfg(const AudioCfg& from);

  inline AudioCfg& operator=(const AudioCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioCfg& default_instance();

  void Swap(AudioCfg* other);

  // implements Message ----------------------------------------------

  AudioCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AudioCfg& from);
  void MergeFrom(const AudioCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gamer.cfg.Audio audio = 1;
  inline int audio_size() const;
  inline void clear_audio();
  static const int kAudioFieldNumber = 1;
  inline const ::gamer::cfg::Audio& audio(int index) const;
  inline ::gamer::cfg::Audio* mutable_audio(int index);
  inline ::gamer::cfg::Audio* add_audio();
  inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Audio >&
      audio() const;
  inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Audio >*
      mutable_audio();

  // @@protoc_insertion_point(class_scope:gamer.cfg.AudioCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Audio > audio_;
  friend void  protobuf_AddDesc_audio_5fcfg_2eproto();
  friend void protobuf_AssignDesc_audio_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_audio_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static AudioCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// Audio

// required .gamer.cfg.AudioIDs id = 1;
inline bool Audio::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Audio::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Audio::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Audio::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::gamer::cfg::AudioIDs Audio::id() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Audio.id)
  return static_cast< ::gamer::cfg::AudioIDs >(id_);
}
inline void Audio::set_id(::gamer::cfg::AudioIDs value) {
  assert(::gamer::cfg::AudioIDs_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.Audio.id)
}

// required string file = 2;
inline bool Audio::has_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Audio::set_has_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Audio::clear_has_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Audio::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& Audio::file() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.Audio.file)
  return *file_;
}
inline void Audio::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:gamer.cfg.Audio.file)
}
inline void Audio::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:gamer.cfg.Audio.file)
}
inline void Audio::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gamer.cfg.Audio.file)
}
inline ::std::string* Audio::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gamer.cfg.Audio.file)
  return file_;
}
inline ::std::string* Audio::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Audio::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.Audio.file)
}

// -------------------------------------------------------------------

// AudioCfg

// repeated .gamer.cfg.Audio audio = 1;
inline int AudioCfg::audio_size() const {
  return audio_.size();
}
inline void AudioCfg::clear_audio() {
  audio_.Clear();
}
inline const ::gamer::cfg::Audio& AudioCfg::audio(int index) const {
  // @@protoc_insertion_point(field_get:gamer.cfg.AudioCfg.audio)
  return audio_.Get(index);
}
inline ::gamer::cfg::Audio* AudioCfg::mutable_audio(int index) {
  // @@protoc_insertion_point(field_mutable:gamer.cfg.AudioCfg.audio)
  return audio_.Mutable(index);
}
inline ::gamer::cfg::Audio* AudioCfg::add_audio() {
  // @@protoc_insertion_point(field_add:gamer.cfg.AudioCfg.audio)
  return audio_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Audio >&
AudioCfg::audio() const {
  // @@protoc_insertion_point(field_list:gamer.cfg.AudioCfg.audio)
  return audio_;
}
inline ::google::protobuf::RepeatedPtrField< ::gamer::cfg::Audio >*
AudioCfg::mutable_audio() {
  // @@protoc_insertion_point(field_mutable_list:gamer.cfg.AudioCfg.audio)
  return &audio_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gamer::cfg::AudioIDs> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gamer::cfg::AudioIDs>() {
  return ::gamer::cfg::AudioIDs_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_audio_5fcfg_2eproto__INCLUDED
