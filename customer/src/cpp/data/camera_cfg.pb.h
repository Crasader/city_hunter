// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_cfg.proto

#ifndef PROTOBUF_camera_5fcfg_2eproto__INCLUDED
#define PROTOBUF_camera_5fcfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_cfg.pb.h"
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_camera_5fcfg_2eproto();
void protobuf_AssignDesc_camera_5fcfg_2eproto();
void protobuf_ShutdownFile_camera_5fcfg_2eproto();

class CameraCfg;

// ===================================================================

class CameraCfg : public ::google::protobuf::Message {
 public:
  CameraCfg();
  virtual ~CameraCfg();

  CameraCfg(const CameraCfg& from);

  inline CameraCfg& operator=(const CameraCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraCfg& default_instance();

  void Swap(CameraCfg* other);

  // implements Message ----------------------------------------------

  CameraCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraCfg& from);
  void MergeFrom(const CameraCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gamer.cfg.Vec3 camera_pos = 1;
  inline bool has_camera_pos() const;
  inline void clear_camera_pos();
  static const int kCameraPosFieldNumber = 1;
  inline const ::gamer::cfg::Vec3& camera_pos() const;
  inline ::gamer::cfg::Vec3* mutable_camera_pos();
  inline ::gamer::cfg::Vec3* release_camera_pos();
  inline void set_allocated_camera_pos(::gamer::cfg::Vec3* camera_pos);

  // required .gamer.cfg.Vec3 camera_lookat = 2;
  inline bool has_camera_lookat() const;
  inline void clear_camera_lookat();
  static const int kCameraLookatFieldNumber = 2;
  inline const ::gamer::cfg::Vec3& camera_lookat() const;
  inline ::gamer::cfg::Vec3* mutable_camera_lookat();
  inline ::gamer::cfg::Vec3* release_camera_lookat();
  inline void set_allocated_camera_lookat(::gamer::cfg::Vec3* camera_lookat);

  // @@protoc_insertion_point(class_scope:gamer.cfg.CameraCfg)
 private:
  inline void set_has_camera_pos();
  inline void clear_has_camera_pos();
  inline void set_has_camera_lookat();
  inline void clear_has_camera_lookat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gamer::cfg::Vec3* camera_pos_;
  ::gamer::cfg::Vec3* camera_lookat_;
  friend void  protobuf_AddDesc_camera_5fcfg_2eproto();
  friend void protobuf_AssignDesc_camera_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_camera_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static CameraCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// CameraCfg

// required .gamer.cfg.Vec3 camera_pos = 1;
inline bool CameraCfg::has_camera_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraCfg::set_has_camera_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraCfg::clear_has_camera_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraCfg::clear_camera_pos() {
  if (camera_pos_ != NULL) camera_pos_->::gamer::cfg::Vec3::Clear();
  clear_has_camera_pos();
}
inline const ::gamer::cfg::Vec3& CameraCfg::camera_pos() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.CameraCfg.camera_pos)
  return camera_pos_ != NULL ? *camera_pos_ : *default_instance_->camera_pos_;
}
inline ::gamer::cfg::Vec3* CameraCfg::mutable_camera_pos() {
  set_has_camera_pos();
  if (camera_pos_ == NULL) camera_pos_ = new ::gamer::cfg::Vec3;
  // @@protoc_insertion_point(field_mutable:gamer.cfg.CameraCfg.camera_pos)
  return camera_pos_;
}
inline ::gamer::cfg::Vec3* CameraCfg::release_camera_pos() {
  clear_has_camera_pos();
  ::gamer::cfg::Vec3* temp = camera_pos_;
  camera_pos_ = NULL;
  return temp;
}
inline void CameraCfg::set_allocated_camera_pos(::gamer::cfg::Vec3* camera_pos) {
  delete camera_pos_;
  camera_pos_ = camera_pos;
  if (camera_pos) {
    set_has_camera_pos();
  } else {
    clear_has_camera_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.CameraCfg.camera_pos)
}

// required .gamer.cfg.Vec3 camera_lookat = 2;
inline bool CameraCfg::has_camera_lookat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraCfg::set_has_camera_lookat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraCfg::clear_has_camera_lookat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraCfg::clear_camera_lookat() {
  if (camera_lookat_ != NULL) camera_lookat_->::gamer::cfg::Vec3::Clear();
  clear_has_camera_lookat();
}
inline const ::gamer::cfg::Vec3& CameraCfg::camera_lookat() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.CameraCfg.camera_lookat)
  return camera_lookat_ != NULL ? *camera_lookat_ : *default_instance_->camera_lookat_;
}
inline ::gamer::cfg::Vec3* CameraCfg::mutable_camera_lookat() {
  set_has_camera_lookat();
  if (camera_lookat_ == NULL) camera_lookat_ = new ::gamer::cfg::Vec3;
  // @@protoc_insertion_point(field_mutable:gamer.cfg.CameraCfg.camera_lookat)
  return camera_lookat_;
}
inline ::gamer::cfg::Vec3* CameraCfg::release_camera_lookat() {
  clear_has_camera_lookat();
  ::gamer::cfg::Vec3* temp = camera_lookat_;
  camera_lookat_ = NULL;
  return temp;
}
inline void CameraCfg::set_allocated_camera_lookat(::gamer::cfg::Vec3* camera_lookat) {
  delete camera_lookat_;
  camera_lookat_ = camera_lookat;
  if (camera_lookat) {
    set_has_camera_lookat();
  } else {
    clear_has_camera_lookat();
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.CameraCfg.camera_lookat)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camera_5fcfg_2eproto__INCLUDED
