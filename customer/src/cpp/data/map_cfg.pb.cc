// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_cfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map_cfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

namespace {

const ::google::protobuf::Descriptor* MapCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_5fcfg_2eproto() {
  protobuf_AddDesc_map_5fcfg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map_cfg.proto");
  GOOGLE_CHECK(file != NULL);
  MapCfg_descriptor_ = file->message_type(0);
  static const int MapCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCfg, map_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCfg, map_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCfg, space_cfg_),
  };
  MapCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapCfg_descriptor_,
      MapCfg::default_instance_,
      MapCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_5fcfg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapCfg_descriptor_, &MapCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_5fcfg_2eproto() {
  delete MapCfg::default_instance_;
  delete MapCfg_reflection_;
}

void protobuf_AddDesc_map_5fcfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gamer::cfg::protobuf_AddDesc_space_5fcfg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmap_cfg.proto\022\tgamer.cfg\032\017space_cfg.pr"
    "oto\"W\n\006MapCfg\022\021\n\tmap_width\030\001 \002(\002\022\022\n\nmap_"
    "height\030\002 \002(\002\022&\n\tspace_cfg\030\003 \002(\0132\023.gamer."
    "cfg.SpaceCfg", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_cfg.proto", &protobuf_RegisterTypes);
  MapCfg::default_instance_ = new MapCfg();
  MapCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_5fcfg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_5fcfg_2eproto {
  StaticDescriptorInitializer_map_5fcfg_2eproto() {
    protobuf_AddDesc_map_5fcfg_2eproto();
  }
} static_descriptor_initializer_map_5fcfg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapCfg::kMapWidthFieldNumber;
const int MapCfg::kMapHeightFieldNumber;
const int MapCfg::kSpaceCfgFieldNumber;
#endif  // !_MSC_VER

MapCfg::MapCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gamer.cfg.MapCfg)
}

void MapCfg::InitAsDefaultInstance() {
  space_cfg_ = const_cast< ::gamer::cfg::SpaceCfg*>(&::gamer::cfg::SpaceCfg::default_instance());
}

MapCfg::MapCfg(const MapCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gamer.cfg.MapCfg)
}

void MapCfg::SharedCtor() {
  _cached_size_ = 0;
  map_width_ = 0;
  map_height_ = 0;
  space_cfg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapCfg::~MapCfg() {
  // @@protoc_insertion_point(destructor:gamer.cfg.MapCfg)
  SharedDtor();
}

void MapCfg::SharedDtor() {
  if (this != default_instance_) {
    delete space_cfg_;
  }
}

void MapCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapCfg_descriptor_;
}

const MapCfg& MapCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_5fcfg_2eproto();
  return *default_instance_;
}

MapCfg* MapCfg::default_instance_ = NULL;

MapCfg* MapCfg::New() const {
  return new MapCfg;
}

void MapCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(map_width_, map_height_);
    if (has_space_cfg()) {
      if (space_cfg_ != NULL) space_cfg_->::gamer::cfg::SpaceCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gamer.cfg.MapCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float map_width = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_width_)));
          set_has_map_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_map_height;
        break;
      }

      // required float map_height = 2;
      case 2: {
        if (tag == 21) {
         parse_map_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_height_)));
          set_has_map_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_space_cfg;
        break;
      }

      // required .gamer.cfg.SpaceCfg space_cfg = 3;
      case 3: {
        if (tag == 26) {
         parse_space_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_space_cfg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gamer.cfg.MapCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gamer.cfg.MapCfg)
  return false;
#undef DO_
}

void MapCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gamer.cfg.MapCfg)
  // required float map_width = 1;
  if (has_map_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->map_width(), output);
  }

  // required float map_height = 2;
  if (has_map_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->map_height(), output);
  }

  // required .gamer.cfg.SpaceCfg space_cfg = 3;
  if (has_space_cfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->space_cfg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gamer.cfg.MapCfg)
}

::google::protobuf::uint8* MapCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gamer.cfg.MapCfg)
  // required float map_width = 1;
  if (has_map_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->map_width(), target);
  }

  // required float map_height = 2;
  if (has_map_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->map_height(), target);
  }

  // required .gamer.cfg.SpaceCfg space_cfg = 3;
  if (has_space_cfg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->space_cfg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gamer.cfg.MapCfg)
  return target;
}

int MapCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float map_width = 1;
    if (has_map_width()) {
      total_size += 1 + 4;
    }

    // required float map_height = 2;
    if (has_map_height()) {
      total_size += 1 + 4;
    }

    // required .gamer.cfg.SpaceCfg space_cfg = 3;
    if (has_space_cfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->space_cfg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapCfg::MergeFrom(const MapCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_width()) {
      set_map_width(from.map_width());
    }
    if (from.has_map_height()) {
      set_map_height(from.map_height());
    }
    if (from.has_space_cfg()) {
      mutable_space_cfg()->::gamer::cfg::SpaceCfg::MergeFrom(from.space_cfg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCfg::CopyFrom(const MapCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_space_cfg()) {
    if (!this->space_cfg().IsInitialized()) return false;
  }
  return true;
}

void MapCfg::Swap(MapCfg* other) {
  if (other != this) {
    std::swap(map_width_, other->map_width_);
    std::swap(map_height_, other->map_height_);
    std::swap(space_cfg_, other->space_cfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapCfg_descriptor_;
  metadata.reflection = MapCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

// @@protoc_insertion_point(global_scope)
