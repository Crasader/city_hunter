// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_cfg.proto

#ifndef PROTOBUF_map_5fcfg_2eproto__INCLUDED
#define PROTOBUF_map_5fcfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "space_cfg.pb.h"
// @@protoc_insertion_point(includes)

namespace gamer {
namespace cfg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_map_5fcfg_2eproto();
void protobuf_AssignDesc_map_5fcfg_2eproto();
void protobuf_ShutdownFile_map_5fcfg_2eproto();

class MapCfg;

// ===================================================================

class MapCfg : public ::google::protobuf::Message {
 public:
  MapCfg();
  virtual ~MapCfg();

  MapCfg(const MapCfg& from);

  inline MapCfg& operator=(const MapCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapCfg& default_instance();

  void Swap(MapCfg* other);

  // implements Message ----------------------------------------------

  MapCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapCfg& from);
  void MergeFrom(const MapCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float map_width = 1;
  inline bool has_map_width() const;
  inline void clear_map_width();
  static const int kMapWidthFieldNumber = 1;
  inline float map_width() const;
  inline void set_map_width(float value);

  // required float map_height = 2;
  inline bool has_map_height() const;
  inline void clear_map_height();
  static const int kMapHeightFieldNumber = 2;
  inline float map_height() const;
  inline void set_map_height(float value);

  // required .gamer.cfg.SpaceCfg space_cfg = 3;
  inline bool has_space_cfg() const;
  inline void clear_space_cfg();
  static const int kSpaceCfgFieldNumber = 3;
  inline const ::gamer::cfg::SpaceCfg& space_cfg() const;
  inline ::gamer::cfg::SpaceCfg* mutable_space_cfg();
  inline ::gamer::cfg::SpaceCfg* release_space_cfg();
  inline void set_allocated_space_cfg(::gamer::cfg::SpaceCfg* space_cfg);

  // @@protoc_insertion_point(class_scope:gamer.cfg.MapCfg)
 private:
  inline void set_has_map_width();
  inline void clear_has_map_width();
  inline void set_has_map_height();
  inline void clear_has_map_height();
  inline void set_has_space_cfg();
  inline void clear_has_space_cfg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float map_width_;
  float map_height_;
  ::gamer::cfg::SpaceCfg* space_cfg_;
  friend void  protobuf_AddDesc_map_5fcfg_2eproto();
  friend void protobuf_AssignDesc_map_5fcfg_2eproto();
  friend void protobuf_ShutdownFile_map_5fcfg_2eproto();

  void InitAsDefaultInstance();
  static MapCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// MapCfg

// required float map_width = 1;
inline bool MapCfg::has_map_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapCfg::set_has_map_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapCfg::clear_has_map_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapCfg::clear_map_width() {
  map_width_ = 0;
  clear_has_map_width();
}
inline float MapCfg::map_width() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.MapCfg.map_width)
  return map_width_;
}
inline void MapCfg::set_map_width(float value) {
  set_has_map_width();
  map_width_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.MapCfg.map_width)
}

// required float map_height = 2;
inline bool MapCfg::has_map_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapCfg::set_has_map_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapCfg::clear_has_map_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapCfg::clear_map_height() {
  map_height_ = 0;
  clear_has_map_height();
}
inline float MapCfg::map_height() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.MapCfg.map_height)
  return map_height_;
}
inline void MapCfg::set_map_height(float value) {
  set_has_map_height();
  map_height_ = value;
  // @@protoc_insertion_point(field_set:gamer.cfg.MapCfg.map_height)
}

// required .gamer.cfg.SpaceCfg space_cfg = 3;
inline bool MapCfg::has_space_cfg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapCfg::set_has_space_cfg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapCfg::clear_has_space_cfg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapCfg::clear_space_cfg() {
  if (space_cfg_ != NULL) space_cfg_->::gamer::cfg::SpaceCfg::Clear();
  clear_has_space_cfg();
}
inline const ::gamer::cfg::SpaceCfg& MapCfg::space_cfg() const {
  // @@protoc_insertion_point(field_get:gamer.cfg.MapCfg.space_cfg)
  return space_cfg_ != NULL ? *space_cfg_ : *default_instance_->space_cfg_;
}
inline ::gamer::cfg::SpaceCfg* MapCfg::mutable_space_cfg() {
  set_has_space_cfg();
  if (space_cfg_ == NULL) space_cfg_ = new ::gamer::cfg::SpaceCfg;
  // @@protoc_insertion_point(field_mutable:gamer.cfg.MapCfg.space_cfg)
  return space_cfg_;
}
inline ::gamer::cfg::SpaceCfg* MapCfg::release_space_cfg() {
  clear_has_space_cfg();
  ::gamer::cfg::SpaceCfg* temp = space_cfg_;
  space_cfg_ = NULL;
  return temp;
}
inline void MapCfg::set_allocated_space_cfg(::gamer::cfg::SpaceCfg* space_cfg) {
  delete space_cfg_;
  space_cfg_ = space_cfg;
  if (space_cfg) {
    set_has_space_cfg();
  } else {
    clear_has_space_cfg();
  }
  // @@protoc_insertion_point(field_set_allocated:gamer.cfg.MapCfg.space_cfg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cfg
}  // namespace gamer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5fcfg_2eproto__INCLUDED
